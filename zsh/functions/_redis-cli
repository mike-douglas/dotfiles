#compdef redis-cli

_redis() {
    local state context line
    local -a redis_commands
    redis_commands=(
        'append:Append a value to a key'
        'auth:Authenticate to the server'
        'bgrewriteaof:Asynchronously rewrite the append-only file'
        'bgsave:Asynchronously save the dataset to disk'
        'blpop:Remove and get the first element in a list, or block until one is available'
        'brpop:Remove and get the last element in a list, or block until one is available'
        'brpoplpush:Pop a value from a list, push it to another list and return it; or block until one is available'
        'config get:Get the value of a configuration parameter'
        'config set:Set a configuration parameter to the given value'
        'config resetstat:Reset the stats returned by INFO'
        'dbsize:Return the number of keys in the selected database'
        'debug object:Get debugging information about a key'
        'debug segfault:Make the server crash'
        'decr:Decrement the integer value of a key by one'
        'decrby:Decrement the integer value of a key by the given number'
        'del:Delete a key'
        'discard:Discard all commands issued after MULTI'
        'echo:Echo the given string'
        'exec:Execute all commands issued after MULTI'
        'exists:Determine if a key exists'
        'expire:Set a keys time to live in secondss time to live in seconds'
        'expireat:Set the expiration for a key as a UNIX timestamp'
        'flushall:Remove all keys from all databases'
        'flushdb:Remove all keys from the current database'
        'get:Get the value of a key'
        'getbit:Returns the bit value at offset in the string value stored at key'
        'getrange:Get a substring of the string stored at a key'
        'getset:Set the string value of a key and return its old value'
        'hdel:Delete a hash field'
        'hexists:Determine if a hash field exists'
        'hget:Get the value of a hash field'
        'hgetall:Get all the fields and values in a hash'
        'hincrby:Increment the integer value of a hash field by the given number'
        'hkeys:Get all the fields in a hash'
        'hlen:Get the number of fields in a hash'
        'hmget:Get the values of all the given hash fields'
        'hmset:Set multiple hash fields to multiple values'
        'hset:Set the string value of a hash field'
        'hsetnx:Set the value of a hash field, only if the field does not exist'
        'hvals:Get all the values in a hash'
        'incr:Increment the integer value of a key by one'
        'incrby:Increment the integer value of a key by the given number'
        'info:Get information and statistics about the server'
        'keys:Find all keys matching the given pattern'
        'lastsave:Get the UNIX time stamp of the last successful save to disk'
        'lindex:Get an element from a list by its index'
        'linsert:Insert an element before or after another element in a list'
        'llen:Get the length of a list'
        'lpop:Remove and get the first element in a list'
        'lpush:Prepend a value to a list'
        'lpushx:Prepend a value to a list, only if the list exists'
        'lrange:Get a range of elements from a list'
        'lrem:Remove elements from a list'
        'lset:Set the value of an element in a list by its index'
        'ltrim:Trim a list to the specified range'
        'mget:Get the values of all the given keys'
        'monitor:Listen for all requests received by the server in real time'
        'move:Move a key to another database'
        'mset:Set multiple keys to multiple values'
        'msetnx:Set multiple keys to multiple values, only if none of the keys exist'
        'multi:Mark the start of a transaction block'
        'persist:Remove the expiration from a key'
        'ping:Ping the server'
        'psubscribe:Listen for messages published to channels matching the given patterns'
        'publish:Post a message to a channel'
        'punsubscribe:Stop listening for messages posted to channels matching the given patterns'
        'quit:Close the connection'
        'randomkey:Return a random key from the keyspace'
        'rename:Rename a key'
        'renamenx:Rename a key, only if the new key does not exist'
        'rpop:Remove and get the last element in a list'
        'rpoplpush:Remove the last element in a list, append it to another list and return it'
        'rpush:Append a value to a list'
        'rpushx:Append a value to a list, only if the list exists'
        'sadd:Add a member to a set'
        'save:Synchronously save the dataset to disk'
        'scard:Get the number of members in a set'
        'sdiff:Subtract multiple sets'
        'sdiffstore:Subtract multiple sets and store the resulting set in a key'
        'select:Change the selected database for the current connection'
        'set:Set the string value of a key'
        'setbit:Sets or clears the bit at offset in the string value stored at key'
        'setex:Set the value and expiration of a key'
        'setnx:Set the value of a key, only if the key does not exist'
        'setrange:Overwrite part of a string at key starting at the specified offset'
        'shutdown:Synchronously save the dataset to disk and then shut down the server'
        'sinter:Intersect multiple sets'
        'sinterstore:Intersect multiple sets and store the resulting set in a key'
        'sismember:Determine if a given value is a member of a set'
        'slaveof:Make the server a slave of another instance, or promote it as master'
        'smembers:Get all the members in a set'
        'smove:Move a member from one set to another'
        'sort:Sort the elements in a list, set or sorted set'
        'spop:Remove and return a random member from a set'
        'srandmember:Get a random member from a set'
        'srem:Remove a member from a set'
        'strlen:Get the length of the value stored in a key'
        'subscribe:Listen for messages published to the given channels'
        'sunion:Add multiple sets'
        'sunionstore:Add multiple sets and store the resulting set in a key'
        'sync:Internal command used for replication'
        'ttl:Get the time to live for a key'
        'type:Determine the type stored at key'
        'unsubscribe:Stop listening for messages posted to the given channels'
        'unwatch:Forget about all watched keys'
        'watch:Watch the given keys to determine execution of the MULTI/EXEC block'
        'zadd:Add a member to a sorted set, or update its score if it already exists'
        'zcard:Get the number of members in a sorted set'
        'zcount:Count the members in a sorted set with scores within the given values'
        'zincrby:Increment the score of a member in a sorted set'
        'zinterstore:Intersect multiple sorted sets and store the resulting sorted set in a new key'
        'zrange:Return a range of members in a sorted set, by index'
        'zrangebyscore:Return a range of members in a sorted set, by score'
        'zrank:Determine the index of a member in a sorted set'
        'zrem:Remove a member from a sorted set'
        'zremrangebyrank:Remove all members in a sorted set within the given indexes'
        'zremrangebyscore:Remove all members in a sorted set within the given scores'
        'zrevrange:Return a range of members in a sorted set, by index, with scores ordered from high to low'
        'zrevrangebyscore:Return a range of members in a sorted set, by score, with scores ordered from high to low'
        'zrevrank:Determine the index of a member in a sorted set, with scores ordered from high to low'
        'zscore:Get the score associated with the given member in a sorted set'
        'zunionstore:Add multiple sorted sets and store the resulting sorted set in a new key'
    )

    _arguments -C -s \
        '(-h)-h[redis server host]:hostname:_hosts' \
        '(-p)-p[port]:port' \
        '(-r)-r[repeat command multiple times]:repeat_times' \
        '*:: :->subcmds' && return 0

    if (( CURRENT == 1 )); then
        _describe -t commands "Redis command" redis_commands -V1
    fi
}

_redis "$@"
