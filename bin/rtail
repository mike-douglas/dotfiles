#!/usr/bin/env python33
'''Tail a redis sub-pub channel

Usage: rtail [--c=<cols>] [--p=<port>] [-ve] (table|pretty|raw) <host> [CHANNEL ...]

Options:
    --c=<cols>  Column width for tabular output [default: 15]
    --p=<port>  Port to connect to [default: 6379]
    -v          Be verbose
    -e          Echo unparseable messages
'''

import docopt
import redis
import sys
import json
import signal

import pprint

def watch_channel(channels, client, decoder, verbose=False, always_output=False):
    ps = client.pubsub()
    ps.subscribe(channels)

    for item in ps.listen():
        if item['type'] == 'message' and len(item['data']) > 0:
            try:
                output = decoder(item['data'])
                if output != None or always_output:
                    print output
            except Exception, e:
                if verbose:
                    print >>sys.stderr, e
                if verbose or always_output:
                    print item['data']

def tabular_json_with_cols(cols):
    def tabular_json(item):
        item = json.loads(item)

        row_format = ''.join('{%d:<%d} | ' % (i, int(cols)) for i in range(0, len(item.keys())))
        print row_format.format(*item.values())

    return tabular_json

def pretty_json(item):
    struct = json.loads(item)

    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(struct)

def sig_interrupt(signal, frame):
    sys.exit(0)

if __name__ == '__main__':
    arguments = docopt.docopt(__doc__, version='rtail 0.0.1')

    signal.signal(signal.SIGINT, sig_interrupt)

    channels = arguments['CHANNEL']
    cols = arguments['--c']
    host = arguments['<host>']
    port = arguments['--p']
    is_verbose = arguments['-v']
    always_output = arguments['-e']

    if arguments['pretty']:
        callback = pretty_json
    elif arguments['table']:
        callback = tabular_json_with_cols(cols)
    else:
        callback = lambda x: x

    client = redis.Redis(host, int(port))

    watch_channel(client=client,
                  channels=channels,
                  decoder=callback,
                  verbose=is_verbose,
                  always_output=always_output)
